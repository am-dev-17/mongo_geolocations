Add and remove replica set members
Reconfigure a replica set 

rs.add()
-- This is going to allow you to add a replica set member 
-- host -> The new member to be added to the replica set 
 {
   _id: <int>,
   host: <string>,        // required
   arbiterOnly: <boolean>,
   buildIndexes: <boolean>,
   hidden: <boolean>,
   priority: <number>,
   tags: <document>,
   secondaryDelaySecs: <int>,
   votes: <number>
}
the arbiterOnly parameter is just a boolean 

rs.add(
    {host: "mongodb4.example.net:27017"}
)

rs.add( "mongodbd4.example.net:27017" )

rs.add( { host: "mongodbd4.example.net:27017", priority: 0 } )

rs.add( { host: "mongodb3.example.net:27017", arbiterOnly: true } )


Removing a replica set member from the replica set 
rs.remove(
"ip"
)

rs.reconfig() is used to reconfigure a replica set 
rs.reconfig(
  <configuration>,
  {
    "force" : <boolean>,
    "maxTimeMS" : <int>
  }
)

cfg = rs.conf();
cfg.members[1].priority = 2;
rs.reconfig(cfg);

Reconfigure a replica set using unavailable members 

Oplog
Understanding the nature of mongodbs statement based replication
Understanding why the oplog must be idempotent
Knowing what operations are stored in the oplog 
Knowing that the oplog stores the _id of the document for writes
one oplog entry per document affected

statement based replication vs binary replication 
binary replication cannot run on multiple different mongodb versions
mongodb will replay the statement based replication 
Remember that mongoDB is going to use statement based replication BUT per document in the oplog 


Replica Set Oplog 
The oplog is a capped collection that keeps a rolling record of all operations that modify data stored in your database.

Minimum Oplog Retention Period 
The retention period and the oplog size must both be surpassed if we want a delete to occur in the oplog entry 

rs.printReplicationInfo() 
This will give you oplog information 
Check the size of the oplog  --> 
configured oplog size:   10.10546875MB
log length start to end: 94400 (26.22hrs)
oplog first event time:  Mon Mar 19 2012 13:50:38 GMT-0400 (EDT)
oplog last event time:   Wed Oct 03 2012 14:59:10 GMT-0400 (EDT)
now:                     Wed Oct 03 2012 15:00:21 GMT-0400 (EDT)

Replication Lag and Flow Control 
db.getReplicationInfo()
-> Get Replication Status from it 

Capped Collections 
The Capped Collections are a collection type that has a set number of documents that can be placed and it will evict older ones 
Capped collections guarantee preservation of the insertion order. As a result, queries do not need an index to return documents in insertion order. Without this indexing overhead, capped collections can support higher insertion throughput.

db.createCollection( "log", { capped: true, size: 100000 } )
db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

db.cappedCollection.find().sort( { $natural: -1 } )

db.runCommand({"convertToCapped": "mycoll", size: 100000});

Minimum Log Retention Period -> Minimum number of hours to preserve the oplog entry 
The minimum log retention period is going to allow you to set a specific time to allow you to keep the log 
Maximum configured size and the minimum retention period must be met to delete an entry from the oplog 
oplogMinRetentionHours 


The quality of an operation to produce the same result given the same input, whether run once or run multiple times.

Read Preference Hedged Reads 
Hedged Reads is going to allow us to send reads to two shards and return the results from the faster one 

Read Prefence maxStalenessSeconds
maxStalenessSeconds allows you to set a time for when the read is lagging and if it exceeds the maxStalenessSeconds, the 
member will not be used for reading anymore
primaryPreferred
secondary
secondaryPreferred
nearest

Write Concern 
What is the default write concern 
How to set the write concern to a majority or to a fixed number of nodes 
How many nodes will have copies of the for a given write concern 
How to ensure writes get to the journal before the acknowledgement

Write Concern Documentation
Level of acknowledgement requested from MongoDB for write operations to a standalone/rs/shard 
RS and sharded sets can set a default write concern 

{ w: <value>, j: <boolean>, wtimeout: <number> }

w option 
{w: "majority"}
Writes have propogated to a major of the data dealing voting members 
{w: 1} only acknowledgement from the primary is needed 
{w: 0} no acknowledgement is needed 


j option 
j option requests acknowledgement from MongoDB that the write operation has been written to the on-disk journal 

journaling -> to provide durability in the event of a failure, mongodb uses write ahead logging to on disk journal files 

wtimeout -> Causes write operations to return with an error after the specified limit even if the required write concern will eventually
succeed/ The current done writes are NOT undone!

if [ (#arbiters > 0) AND (#non-arbiters <= majority(#voting-nodes)) ]
    defaultWriteConcern = { w: 1 }
else
    defaultWriteConcern = { w: "majority" }

Non-Arbiters
Arbiters
Voting Nodes
Majority of Voting Nodes
Implicit Default Write Concern
2
1
3
2
{ w: 1 }
4
1
5
3
{ w: "majority" }


Majority of voting nodes is 1 + floor(number of voting nodes/2)

if there is an arbiter 
data bearing must be > major of voting for {w:majority } else {w:1}


Write Concern For Replica Sets 
